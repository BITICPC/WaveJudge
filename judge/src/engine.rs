//! This module implements the very core logic of the judge, or the engine's
//! logic. The judge engine performs judge task described in
//! `JudgeTaskDescriptor` values and produce judge result in `JudgeResult`
//! values.
//!

use std::path::{Path, PathBuf};
use std::sync::Arc;

use super::{
    Result,
    JudgeTaskDescriptor,
    JudgeResult,
};
use super::languages::LanguageManager;


/// A judge engine instance.
pub struct JudgeEngine<'a> {
    task: &'a JudgeTaskDescriptor,
    languages: Arc<LanguageManager>,
}

impl<'a> JudgeEngine<'a> {
    /// Create a new judge engine that performs the given judge task.
    pub fn new(task: &'a JudgeTaskDescriptor) -> JudgeEngine<'a> {
        JudgeEngine {
            task,
            languages: super::languages::LanguageManager::singleton()
        }
    }

    /// Execute the judge task.
    pub fn run(self) -> Result<JudgeResult> {
        // TODO: Implement JudgeEngine<_>::run(self).
        unimplemented!()
    }
}

/// Provide necessary information to compile a source program.
pub struct CompilationInfo {
    /// Path to the compiler's executable file.
    pub compiler: PathBuf,

    /// Arguments to the compiler.
    pub args: Vec<String>,

    /// Environment variables passed to the compiler.
    pub envs: Vec<(String, String)>,

    /// Path to the output file generated by the compiler. These files will be
    /// sent to the language provider creating this `CompilerInfo` instance to
    /// execute the program.
    pub output_file: PathBuf
}

impl CompilationInfo {
    /// Create a new `CompilationInfo` instance.
    pub fn new(compiler: &Path, output_file: &Path) -> CompilationInfo {
        CompilationInfo {
            compiler: compiler.to_owned(),
            args: Vec::new(),
            envs: Vec::new(),
            output_file: output_file.to_owned()
        }
    }
}

/// Represent the compilation scheme of a source code file.
#[derive(Clone, Copy)]
pub enum CompilationScheme {
    /// The source code file to be compiled is a judgee.
    Judgee,

    /// The source code file to be compiled is a checker program.
    Checker,

    /// The source code file to be compiled is an interactor program.
    Interactor
}

/// Provide necessary information to execute a program.
pub struct ExecutionInfo {
    /// Path to the executable file to be executed.
    pub executable: PathBuf,

    /// Arguments to be passed to the program.
    pub args: Vec<String>,

    /// Environment variables to be passed to the program.
    pub envs: Vec<(String, String)>,
}

impl ExecutionInfo {
    /// Create a new `ExecutionInfo` instance.
    pub fn new(executable: &Path) -> ExecutionInfo {
        ExecutionInfo {
            executable: executable.to_owned(),
            args: Vec::new(),
            envs: Vec::new()
        }
    }
}
